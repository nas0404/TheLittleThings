# # azure-pipelines.yml
# pool:
#   vmImage: ubuntu-latest

# steps:
#   - task: UseNode@1
#     displayName: "Use Node.js 20.x"
#     inputs:
#       version: '20.19.0'


#   # Optional: cache npm to speed up CI
#   - task: Cache@2
#     displayName: Cache npm (frontend)
#     inputs:
#       key: 'npm | "$(Agent.OS)" | frontend/package-lock.json'
#       path: frontend/node_modules
#       restoreKeys: |
#         npm | "$(Agent.OS)"
#     # Cache only helps if node_modules already exists from a previous run;
#     # npm ci will still run and update as needed.

#   - script: npm ci
#     displayName: "Install dependencies (frontend)"
#     workingDirectory: frontend

#   # Unit test step(s) should go here, after install and before build.
#   # Example later: npm run test or npm run test:ci
#   # workingDirectory: frontend

#   - script: npm run build
#     displayName: "Build frontend"
#     workingDirectory: frontend

pool:
  vmImage: ubuntu-latest

steps:
  # ---------- FRONTEND ----------
  - task: UseNode@1
    displayName: "Use Node.js 20.x"
    inputs:
      version: '20.19.0'

  - task: Cache@2
    displayName: Cache npm (frontend)
    inputs:
      key: 'npm | "$(Agent.OS)" | frontend/package-lock.json'
      path: frontend/node_modules
      restoreKeys: |
        npm | "$(Agent.OS)"

  - script: npm ci
    displayName: "Install dependencies (frontend)"
    workingDirectory: frontend

  - script: npm run build
    displayName: "Build frontend"
    workingDirectory: frontend

  # ---------- BACKEND ----------
  - task: UseJavaVersion@1
    displayName: "Set up Java 17"
    inputs:
      versionSpec: '17'
      jdkArchitectureOption: 'x64'

  - script: mvn -B -q clean test
    displayName: "Run backend unit tests"
    workingDirectory: backend
