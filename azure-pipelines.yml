# Trigger this pipeline whenever code is pushed to the 'main' branch
trigger:
  - main

# Use a hosted Ubuntu virtual machine provided by Azure DevOps
pool:
  vmImage: ubuntu-latest

variables:
  webAppName: 'TheLittleThings'             # your App Service name
  azureServiceConnection: 'TheLittleThings' # service connection you created
  artifactName: 'drop'

steps:
  - task: UseNode@1
    displayName: "Use Node.js 20.x"
    inputs:
      version: '20.19.0'

  - task: Cache@2
    displayName: "Cache npm (frontend)"
    inputs:
      key: 'npm | "$(Agent.OS)" | frontend/package-lock.json'
      path: frontend/node_modules
      restoreKeys: |
        npm | "$(Agent.OS)"

  - script: npm ci
    displayName: "Install dependencies (frontend)"
    workingDirectory: frontend

  - script: npm run build
    displayName: "Build frontend"
    workingDirectory: frontend

  # Copy built frontend into Spring Boot static folder
  - bash: |
      set -e
      OUT=""
      if [ -d "frontend/dist" ]; then OUT="frontend/dist"; fi
      if [ -d "frontend/build" ]; then OUT="frontend/build"; fi
      if [ -z "$OUT" ]; then
        echo "No frontend build output found (expected frontend/dist or frontend/build)"; exit 1
      fi
      rm -rf backend/src/main/resources/static || true
      mkdir -p backend/src/main/resources/static
      cp -r "$OUT/"* backend/src/main/resources/static/
      echo "Copied $OUT -> backend/src/main/resources/static"
    displayName: "COPY frontend â†’ backend static"

  - task: JavaToolInstaller@0
    displayName: "Set up Java 17"
    inputs:
      versionSpec: '17'
      jdkArchitectureOption: 'x64'
      jdkSourceOption: 'PreInstalled'

  - task: Cache@2
    displayName: "Cache Maven repository"
    inputs:
      key: 'maven | "$(Agent.OS)" | **/pom.xml'
      path: $(Pipeline.Workspace)/.m2
      restoreKeys: |
        maven | "$(Agent.OS)"

  - script: |
      mvn -B -Dmaven.repo.local=$(Pipeline.Workspace)/.m2 \
        clean test \
        -Dsurefire.printSummary=true \
        -Dsurefire.useFile=false \
        --no-transfer-progress
    displayName: "Run backend unit tests"
    workingDirectory: backend

  - task: PublishTestResults@2
    displayName: "Publish JUnit results"
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: 'backend/target/surefire-reports/*.xml'
      mergeTestResults: true
      testRunTitle: 'Backend Unit Tests'

  # Package the backend as a fat JAR for App Service
  - script: |
      mvn -B -Dmaven.repo.local=$(Pipeline.Workspace)/.m2 \
        clean package -DskipTests --no-transfer-progress
    displayName: "Package backend (fat JAR)"
    workingDirectory: backend

  # Stage app.jar + web.config for deployment
  - bash: |
      set -e
      STAGE="$(Build.ArtifactStagingDirectory)"
      mkdir -p "$STAGE"
      JAR=$(ls backend/target/*.jar | head -n 1)
      cp "$JAR" "$STAGE/app.jar"
      # CHANGE: Use the dynamic port from IIS (HTTP_PLATFORM_PORT); removed hard-coded 8080.
      cat > "$STAGE/web.config" << 'EOF'
      <?xml version="1.0" encoding="utf-8"?>
      <configuration>
        <system.webServer>
          <handlers>
            <add name="httpPlatformHandler" path="*" verb="*" modules="httpPlatformHandler" resourceType="Unspecified" />
          </handlers>
          <httpPlatform
            processPath="%JAVA_HOME%\bin\java.exe"
            arguments="-Dserver.port=%HTTP_PLATFORM_PORT% -jar %HOME%\site\wwwroot\app.jar"
            stdoutLogEnabled="true"
            stdoutLogFile="%HOME%\LogFiles\java.log" />
        </system.webServer>
      </configuration>
      EOF
      echo "Staged $(ls -l "$STAGE")"
    displayName: "Stage deployables (app.jar + web.config)"

  # Zip everything in staging folder
  - task: ArchiveFiles@2
    displayName: "Zip staged files to app.zip"
    inputs:
      rootFolderOrFile: '$(Build.ArtifactStagingDirectory)'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/app.zip'
      replaceExistingArchive: true

  # Sanity check before deploy
  - script: |
      echo "Contents of $(Build.ArtifactStagingDirectory):"
      ls -l "$(Build.ArtifactStagingDirectory)"
    displayName: "List staging directory (debug)"

  # Deploy to Azure App Service (Run-From-Package)
  - task: AzureWebApp@1
    displayName: "Deploy to Azure App Service: $(webAppName)"
    inputs:
      azureSubscription: '$(azureServiceConnection)'
      appName: '$(webAppName)'
      package: '$(Build.ArtifactStagingDirectory)/app.zip'
      appType: 'webApp'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    # CHANGE: no path change needed; deployment will mount the ZIP read-only and use our corrected web.config.

  # Publish artifacts for download/debugging
  - publish: '$(Build.ArtifactStagingDirectory)'
    artifact: $(artifactName)
    displayName: "Publish build artifact"
